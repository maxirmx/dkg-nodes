// Copyright (C) 2024 Maxim [maxirmx] Samsonov (www.sw.consulting)
// All rights reserved.
// This file is a part of dkg service node
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS
// BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

option csharp_namespace = "dkgCommon";

package DkgNodeApi;

service DkgNode {
  rpc GetPublicKey (PublicKeyRequest) returns (PublicKeyReply) {}
  rpc ProcessDeal (ProcessDealRequest) returns (ProcessDealReply) {}
  rpc ProcessResponse (ProcessResponseRequest) returns (ProcessResponseReply) {}

  rpc RunRound (RunRoundRequest) returns (RunRoundReply) {}
  rpc EndRound (EndRoundRequest) returns (EndRoundReply) {}
  rpc RoundResult (RoundResultRequest) returns (RoundResultReply) {}
}

message PublicKeyRequest {
}

message PublicKeyReply {
  bytes data = 1;
}

message ProcessDealRequest {
  bytes data = 1;
}

message ProcessDealReply {
  bytes	data = 1;
}

message ProcessResponseRequest {
  bytes data = 1;
}

message ProcessResponseReply {
}

message DkgNodeRef {
  int32 port = 1;
  string host = 2;
  string publicKey = 3;
}

message RunRoundRequest {
  int32 roundId = 1;
  repeated DkgNodeRef dkgNodeRefs = 2;
}

message RunRoundReply {
  bool res = 1;
}

message EndRoundRequest {
  int32 roundId = 1;
}

message EndRoundReply {
  bool res = 1;
}

message RoundResultRequest {
  int32 roundId = 1;
}

message RoundResultReply {
  bool res = 1;
  bytes distributedPublicKey = 2;
}
